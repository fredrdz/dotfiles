#!/bin/bash
# author: Fredy Rodriguez
# note: uses golang templates to generate bash script
# to see chezmoi vars
# use: chezmoi data

packages-dnf() {
	sudo dnf update -y
	sudo dnf install -y util-linux-user zsh make cmake sshuttle tmux xclip xsel yp-tools \
		libgit2-devel libssh2-devel openssl-devel pkg-config g++ gcc gcc-c++ perl podman \
		httpie htop neofetch wget ninja-build libtool openssh-server gh btop autossh \
		clang libevent-devel luarocks openssl net-tools jq go neovim \
		flatpak nodejs ripgrep vim docker iotop iftop speedtest-cli libusb1-devel.x86_64
	sudo dnf groupinstall -y 'Development Tools' 'Development Libraries'
	sudo dnf install -y 'dnf-command(copr)'
	sudo dnf copr enable atim/lazygit -y
	sudo dnf install -y lazygit
	sudo dnf copr enable @caddy/caddy -y
	sudo dnf install -y caddy
	# sudo dnf module install -y nodejs:18/common
}

packages-node() {
	sudo npm install diff-so-fancy -g
	sudo npm install netlify-cli -g
	netlify completion:install
}

packages-golang() {
	go install github.com/Gelio/go-global-update@latest
	go install github.com/walles/moar@latest
	go install github.com/dundee/gdu/v5/cmd/gdu@latest
	go install sigs.k8s.io/kind@v0.17.0
	go install github.com/mikefarah/yq/v4@latest
	go install github.com/TheZoraiz/ascii-image-converter@latest
	go install github.com/sensepost/gowitness@latest
	go install github.com/zsa/wally-cli@latest
	go install github.com/ivaaaan/smug@latest
	go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest
	go install github.com/cosmtrek/air@latest
	go install github.com/charmbracelet/glow@latest
	CGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@latest
}

packages-rust() {
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
	~/.cargo/bin/cargo install navi zoxide eza starship bat tree-sitter-cli bottom bws
	~/.cargo/bin/cargo install cargo-update
}

packages-flatpak() {
	# flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
	flatpak install flathub org.wezfurlong.wezterm org.signal.Signal com.slack.Slack com.google.Chrome com.discordapp.Discord com.brave.Browser
}

packages-virtualization() {
	# virtualization
	#  sudo vi /etc/libvirt/libvirtd.conf
	#  unix_sock_group = "libvirt"
	#  unix_sock_rw_perms = "0770"
	sudo dnf install -y @virtualization
	sudo systemctl enable libvirtd
	sudo systemctl start libvirtd
	sudo usermod -a -G libvirt $(whoami)
}

packages-docker() {
	sudo dnf -y install dnf-plugins-core
	sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
	sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
	sudo systemctl enable docker.service
	sudo systemctl enable containerd.service
	sudo systemctl start docker
	sudo groupadd docker
	sudo usermod -aG docker $USER
	newgrp docker
}

packages-php() {
	sudo dnf install -y php
	curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
	chmod +x wp-cli.phar
	sudo mv wp-cli.phar /usr/local/bin/wp
}

packages-aws() {
	tempfile=$(mktemp) &&
		curl -o $tempfile "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" &&
		unzip $tempfile -d /tmp/ &&
		sudo /tmp/aws/install &&
		rm $tempfile /tmp/aws -rf
}

settings-development() {
	# fzf
	~/.fzf/install
	# chezmoi
	mkdir ~/.oh-my-zsh/completions/
	chezmoi completion zsh --output=~/.oh-my-zsh/completions/_chezmoi
	# bws
	~/.cargo/bin/bws completions zsh >~/.oh-my-zsh/completions/_bws
	# wezterm
	tempfile=$(mktemp) &&
		curl -o $tempfile https://raw.githubusercontent.com/wez/wezterm/main/termwiz/data/wezterm.terminfo &&
		tic -x -o ~/.terminfo $tempfile &&
		rm $tempfile
	# xterm-256color-italic
	curl --silent \
		https://gist.githubusercontent.com/sadsfae/0b4dd18670639f7dce941a1b2a9e4e9e/raw/908b48e6b6370da0568be8d138966c60240a50dd/xterm-256color-italic.terminfo \
		>~/Documents/xterm-256color-italic
	tic ~/Documents/xterm-256color-italic
	# nerd-fonts
	wget https://github.com/ryanoasis/nerd-fonts/releases/download/v2.2.2/JetBrainsMono.zip -P ~/Documents/
	mkdir ~/.local/share/fonts
	unzip ~/Documents/JetBrainsMono.zip -d ~/.local/share/fonts/
	fc-cache ~/.local/share/fonts
	# timezone
	sudo timedatectl set-timezone America/Chicago
}

settings-locale() {
	sudo dnf install glibc-langpack-en
	sudo localectl set-locale LANG=en_US.UTF-8
}

packages-desktop() {
	sudo dnf install -y xprop xwininfo xdotool xrandr xev vlc mpv chromium gtk3 webkit2gtk3 \
		'pkgconfig(libudev)'
	# tdrop
	# git clone https://github.com/noctuid/tdrop
	# sudo make install
	#
	# swhkd
	# git clone https://github.com/waycrate/swhkd
	# cd swhkd
	# make setup
	# make clean
	# make
	# sudo make install
	# sudo ln -s ~/.config/swhkd/swhkdrc /etc/swhkd/swhkdrc
	# ssh
	sudo systemctl enable sshd
	sudo systemctl start sshd
	# wezterm
	wezterm shell-completion --shell zsh >~/.oh-my-zsh/completions/_wezterm
}

{{ if eq .osid "darwin" }}
echo "Detected MacOS"
echo "Do you want to continue with installs?(yes/no)"
read input
if [ "$input" == "yes" ]; then
	# shell
	chsh -s /usr/bin/zsh
	# rust
	packages-rust
	# golang
	packages-golang
	# node
	packages-node
	# env/dev settings
	settings-development
fi

{{ else if eq .osid "linux-fedora" }}
echo "Detected Fedora"
echo "Do you want to continue with installs?(yes/no)"
read input
if [ "$input" == "yes" ]; then
	# dnf
	packages-dnf
	# shell
	chsh -s /usr/bin/zsh
	# php
	packages-php
	# rust
	packages-rust
	# golang
	packages-golang
	# node
	packages-node
	# aws
	packages-aws
	# env/dev settings
	settings-development
	# chezmoi
	cd ~/.local/share/chezmoi/ && git remote set-url origin git@github.com:fredrdz/dotfiles.git && cd -
fi

{{ else if eq .osid "linux-nobara" }}
echo "Detected Nobara"
echo "Do you want to continue with installs?(yes/no)"
read input
if [ "$input" == "yes" ]; then
	# dnf
	packages-dnf
	# shell
	chsh -s /usr/bin/zsh
	# php
	packages-php
	# rust
	packages-rust
	# golang
	packages-golang
	# node
	packages-node
	# aws
	packages-aws
	# env/dev settings
	settings-development
	# virtualization
	settings-virtualization
	# desktop
	packages-desktop
	# flatpak
	packages-flatpak
fi

{{ else if eq .osid "linux-steamos" }}
echo "Detected Steam OS / Steam Deck"
echo "Do you want to continue with installs?(yes/no)"
read input
if [ "$input" == "yes" ]; then
	# STEAM DECK ONLY
	passwd
	sudo steamos-readonly disable
	sudo pacman-key --init
	sudo pacman-key --populate archlinux
	sudo pacman -Sy
	sudo steamos-readonly enable
fi
{{ end }}
